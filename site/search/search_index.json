{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Thermal performance model","text":"<p>The UCare program is a tool designed to assess the risk of overheating in a dwelling using non-destructive/invasive methods.</p> <p>With a working 1R1C model, a simulation can be carried out using UKCP weather data (see here) to predict the performance of the building for the future. When combined with the CIBSE TM59 standards for overheating in buildings (number of hours above 26\u00b0C) the risk of overheating in the dwelling can be estimated.</p> <p>Run <code>src.app.py</code> to locally view the app. there is also a <code>Procfile</code> and <code>requirements.txt</code> present to allow for deployment with Heroku.</p> <p>The current app has 4 tabs:</p> <ol> <li> <p>Home - Presents the information about the scientific method behind the thermal model and explains what data inputs are required from a site.</p> </li> <li> <p>Validation - Compares the simulated &amp; measured indoor air temperature for 3 dwellings.</p> </li> <li> <p>Short-term alert - Forecast of indoor air temperature with overheating counts in the next 1, 7, 14, 30, 60 &amp; 90 days with temperature plot showing min, max and mean room temperatures over 5 months.</p> </li> <li> <p>Long-term alert - Forecast of percentage risk of overheating until 2040</p> </li> </ol>"},{"location":"reference/app/","title":"App","text":""},{"location":"reference/app/#app.create_app","title":"<code>create_app()</code>","text":"<p>Create the dash app</p> <p>Returns:</p> Name Type Description <code>Dash</code> <code>Dash</code> <p>The dash app.</p>"},{"location":"reference/app/#app.create_layout","title":"<code>create_layout(app)</code>","text":"<p>Create the callback to handle mutlipage inputs</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Dash</code> <p>The dash app to add the layout to.</p> required <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: The layout components.</p>"},{"location":"reference/app/#app.main","title":"<code>main()</code>","text":"<p>Main function to run the app.</p>"},{"location":"reference/components/","title":"Index","text":""},{"location":"reference/components/dropdown/","title":"Dropdown","text":""},{"location":"reference/components/dropdown/#components.dropdown.get_dropdown","title":"<code>get_dropdown(app, title, list_values, id)</code>","text":"<p>Create a dash dropdown component with the given list of values and id.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Dash</code> <p>The dash app to add the dropdown to.</p> required <code>title</code> <code>str</code> <p>The title of the dropdown.</p> required <code>list_values</code> <code>list[str]</code> <p>The list of values to be displayed in the dropdown.</p> required <code>id</code> <code>str</code> <p>The id of the dropdown.</p> required <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: The dropdown component.</p>"},{"location":"reference/components/ids/","title":"Ids","text":""},{"location":"reference/components/sidebar/","title":"Sidebar","text":""},{"location":"reference/components/sidebar/#components.sidebar.get_sidebar","title":"<code>get_sidebar(app)</code>","text":"<p>Create a dash navigation sidebar component.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Dash</code> <p>The dash app to add the sidebar to.</p> required <p>Returns:</p> Name Type Description <code>Component</code> <code>Component</code> <p>The sidebar component.</p>"},{"location":"reference/pages/","title":"Index","text":""},{"location":"reference/pages/home_page/","title":"Home page","text":""},{"location":"reference/pages/home_page/#pages.home_page.create_layout","title":"<code>create_layout(app)</code>","text":"<p>Create the layout for the home page.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Dash</code> <p>The dash app to add the layout to.</p> required <p>Returns:</p> Type Description <code>list[Component]</code> <p>list[Component]: The layout components.</p>"},{"location":"reference/pages/longterm_page/","title":"Longterm page","text":""},{"location":"reference/pages/longterm_page/#pages.longterm_page.create_figure","title":"<code>create_figure(dataf)</code>","text":"<p>Create a plotly figure with the given dataframe. </p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be visualised.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The plotly figure.</p>"},{"location":"reference/pages/longterm_page/#pages.longterm_page.create_layout","title":"<code>create_layout(app)</code>","text":"<p>Creates longterm page layout and loads the content.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Dash</code> <p>The dash app to add the layout to.</p> required <p>Returns:</p> Type Description <code>list[Component]</code> <p>list[Component]: The layout components.</p>"},{"location":"reference/pages/longterm_page/#pages.longterm_page.create_table","title":"<code>create_table(dataf)</code>","text":"<p>Create a dash ag-grid table with the given dataframe. </p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be visualised.</p> required <p>Returns:</p> Type Description <code>AgGrid</code> <p>dag.AgGrid: The dash ag-grid table.</p>"},{"location":"reference/pages/longterm_page/#pages.longterm_page.filter_data","title":"<code>filter_data(selected)</code>","text":"<p>Filter the data based on the selected area and update the subtitle.</p> <p>Parameters:</p> Name Type Description Default <code>selected</code> <code>list[dict[str, Any]]</code> <p>The selected area.</p> required <p>Returns:</p> Type Description <code>tuple[dict[str, dict[str, Any]], str]</code> <p>tuple[dict[str, dict[str, Any]], str]: The filtered data and the new subtitle.</p>"},{"location":"reference/pages/longterm_page/#pages.longterm_page.update_graph","title":"<code>update_graph(c_store)</code>","text":"<p>Update the graph based on the selected area.</p> <p>Parameters:</p> Name Type Description Default <code>c_store</code> <code>Any</code> <p>The data stored in the store.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The updated graph.</p>"},{"location":"reference/pages/paragraph_text/","title":"Paragraph text","text":""},{"location":"reference/pages/shortterm_page/","title":"Shortterm page","text":""},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.assess_overheating_hours","title":"<code>assess_overheating_hours(iat_values)</code>","text":"<p>Assess the number of overheating hours based on the indoor air temperature  and overheating threshold value. </p> <p>Parameters:</p> Name Type Description Default <code>iat_values</code> <code>Series</code> <p>The indoor air temperature values.</p> required <p>Returns:</p> Type Description <code>Series</code> <p>pd.Series: The number of overheating hours.</p>"},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.create_figure","title":"<code>create_figure(dataf)</code>","text":"<p>Create a figure with the given dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be visualised.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The plotly figure.</p>"},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.create_layout","title":"<code>create_layout(app)</code>","text":"<p>Creates shortterm page layout and loads the content.  Args:     app (Dash): The dash app to add the layout to. Returns:     list[Component]: The layout components.</p>"},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.create_table","title":"<code>create_table(dataf)</code>","text":"<p>Create an ag-grid table with the given dataframe.  Args:     dataf (pd.DataFrame): The dataframe to be visualised.</p> <p>Returns:</p> Type Description <code>AgGrid</code> <p>dag.AgGrid: The ag-grid table component.</p>"},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.filter_data","title":"<code>filter_data(value)</code>","text":"<p>Filter the forecasted data based on the selected dwelling.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The selected dwelling value.</p> required <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>dict[str, dict[str, Any]]: The filtered forecasted data.</p>"},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.get_overheating_df","title":"<code>get_overheating_df(overheating_hours)</code>","text":"<p>Create a dataframe with the number of overheating hours for each dwelling. </p> <p>Parameters:</p> Name Type Description Default <code>overheating_hours</code> <code>DataFrame</code> <p>The dataframe with the number of overheating hours.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The dataframe with the number of overheating hours for each dwelling.</p>"},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.update_cell_selected","title":"<code>update_cell_selected(selected)</code>","text":"<p>Update the selected cell text.</p> <p>Parameters:</p> Name Type Description Default <code>selected</code> <code>list[dict[str, Any]]</code> <p>The selected cell.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected cell text.</p>"},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.update_graph","title":"<code>update_graph(c_store)</code>","text":"<p>Update the graph based on the selected dwelling.</p> <p>Parameters:</p> Name Type Description Default <code>c_store</code> <code>Any</code> <p>The data stored in the store.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The updated graph.</p>"},{"location":"reference/pages/shortterm_page/#pages.shortterm_page.update_selection_text","title":"<code>update_selection_text(value)</code>","text":"<p>Update the selected dwelling text.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The selected dwelling value.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected dwelling text.</p>"},{"location":"reference/pages/validation_page/","title":"Validation page","text":""},{"location":"reference/pages/validation_page/#pages.validation_page.calculate_simulation_errors","title":"<code>calculate_simulation_errors(predicted_data, measured_data)</code>","text":"<p>Calculate the RMSE and MAE between the predicted and measured data. </p> <p>Parameters:</p> Name Type Description Default <code>predicted_data</code> <code>Series</code> <p>The predicted data.</p> required <code>measured_data</code> <code>Series</code> <p>The measured data.</p> required <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>dict[str, float]: The RMSE and MAE values.</p>"},{"location":"reference/pages/validation_page/#pages.validation_page.create_figure","title":"<code>create_figure(dataf)</code>","text":"<p>Create a plotly figure with the given dataframe.  Args:     dataf (pd.DataFrame): The dataframe to be visualised. Returns:     go.Figure: The plotly figure.</p>"},{"location":"reference/pages/validation_page/#pages.validation_page.create_layout","title":"<code>create_layout(app)</code>","text":"<p>Creates validation page layout and loads the content. </p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Dash</code> <p>The dash app to add the layout to.</p> required <p>Returns:</p> Type Description <code>list[Component]</code> <p>list[Component]: The layout components.</p>"},{"location":"reference/pages/validation_page/#pages.validation_page.filter_data","title":"<code>filter_data(value)</code>","text":"<p>Filter the simulation data based on the selected dwelling.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The selected dwelling value.</p> required <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>dict[str, dict[str, Any]]: The filtered simulation data.</p>"},{"location":"reference/pages/validation_page/#pages.validation_page.generate_error_text","title":"<code>generate_error_text(errors)</code>","text":"<p>Creates a text string to output the error values. </p> <p>Parameters:</p> Name Type Description Default <code>errors</code> <code>dict[str, float]</code> <p>The error values.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The error text string.</p>"},{"location":"reference/pages/validation_page/#pages.validation_page.update_errors_text","title":"<code>update_errors_text(c_store)</code>","text":"<p>Update the error text based on the selected dwelling.</p> <p>Parameters:</p> Name Type Description Default <code>c_store</code> <code>Any</code> <p>The data stored in the store.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The updated error text.</p>"},{"location":"reference/pages/validation_page/#pages.validation_page.update_graph","title":"<code>update_graph(c_store)</code>","text":"<p>Update the graph based on the selected dwelling.</p> <p>Parameters:</p> Name Type Description Default <code>c_store</code> <code>Any</code> <p>The data stored in the store.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: The updated graph.</p>"},{"location":"reference/pages/validation_page/#pages.validation_page.update_selection_text","title":"<code>update_selection_text(value)</code>","text":"<p>Update the selected dwelling text.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The selected dwelling value.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The selected dwelling text.</p>"},{"location":"reference/utils/","title":"Index","text":""},{"location":"reference/utils/common_functions/","title":"Common functions","text":""},{"location":"reference/utils/common_functions/#utils.common_functions.get_area_id","title":"<code>get_area_id(value)</code>","text":"<p>Returns the area id based on the input value    and area_type from .env, default 'Dwelling'.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The selected dwelling value.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The area id.</p>"},{"location":"reference/utils/common_functions/#utils.common_functions.get_area_str","title":"<code>get_area_str(area_id)</code>","text":"<p>Returns the area string from the input area_id    and area_type from .env, default 'Dwelling'.</p> <p>Parameters:</p> Name Type Description Default <code>area_id</code> <code>int</code> <p>The area id.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The area string.</p>"},{"location":"reference/utils/common_functions/#utils.common_functions.get_list_area_str","title":"<code>get_list_area_str(list_ids)</code>","text":"<p>Returns the area string from the input list of area_ids    and area_type from .env, default 'Dwelling'.</p> <p>Parameters:</p> Name Type Description Default <code>list_ids</code> <code>list[int]</code> <p>The list of area_ids.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: The list of area strings.</p>"},{"location":"reference/utils/enums/","title":"Enums","text":""},{"location":"reference/utils/loader/","title":"Loader","text":""},{"location":"reference/utils/loader/#utils.loader.duplicates_dummy_forecasted_data","title":"<code>duplicates_dummy_forecasted_data(org_dataf)</code>","text":"<p>Similar to duplicates_dummy_simulation_data, duplicates the forecasted        data for nb dwellings. nb = 3. </p> <p>Parameters:</p> Name Type Description Default <code>org_dataf</code> <code>DataFrame</code> <p>The original forecasted data.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The duplicated forecasted data for nb dwellings.</p>"},{"location":"reference/utils/loader/#utils.loader.duplicates_dummy_simulation_data","title":"<code>duplicates_dummy_simulation_data(org_dataf)</code>","text":"<p>Duplicates the simulation data for nb dwellings. nb = 3. </p> <p>Parameters:</p> Name Type Description Default <code>org_dataf</code> <code>DataFrame</code> <p>The original simulation data.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The duplicated simulation data for nb dwellings.</p>"},{"location":"reference/utils/loader/#utils.loader.get_dummy_forecasted_data","title":"<code>get_dummy_forecasted_data()</code>","text":"<p>Loads the forecasted data for nb dwellings. </p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The forecasted data for nb dwellings.</p>"},{"location":"reference/utils/loader/#utils.loader.get_dummy_longterm_data","title":"<code>get_dummy_longterm_data()</code>","text":"<p>Loads the long term simulation data for nb dwellings. </p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The long term simulation data for nb dwellings.</p>"},{"location":"reference/utils/loader/#utils.loader.get_dummy_simulation_data","title":"<code>get_dummy_simulation_data()</code>","text":"<p>Loads the simulation data  for nb dwellings.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The simulation data for nb dwellings.</p>"},{"location":"reference/utils/loader/#utils.loader.get_overheating_hours_per_year","title":"<code>get_overheating_hours_per_year(dataf)</code>","text":"<p>Get the total number of overheating and night overheating hours per year.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be used.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The dataframe with the total number of overheating and night overheating hours per year.</p>"},{"location":"reference/utils/loader/#utils.loader.get_overheating_perct_per_year","title":"<code>get_overheating_perct_per_year(dataf)</code>","text":"<p>Get the percentage of overheating and night overheating hours per year.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be used.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The dataframe with the percentage of overheating and night overheating hours per year.</p>"},{"location":"reference/utils/loader/#utils.loader.get_overheating_summary_results","title":"<code>get_overheating_summary_results(dataf)</code>","text":"<p>Get a table with percentage of overheating and night overheating hours per year as input   and return a table that indicates if the dwelling is at risk of overheating or night overheating for each year based on a threshold.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be used.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The dataframe with the overheating and night overheating flags.</p>"},{"location":"reference/utils/loader/#utils.loader.get_overheating_table","title":"<code>get_overheating_table(dataf)</code>","text":"<p>Get an overheating summary results per year and return a table with the percentage of overheating and night overheating hours for all years.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be used.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The dataframe with the percentage of overheating and night overheating hours for all years.</p>"},{"location":"reference/utils/loader/#utils.loader.get_ratio_groupby_col","title":"<code>get_ratio_groupby_col(target_col, dataf)</code>","text":"<p>Get the ratio of a target column to the total number of hours for each dwelling.</p> <p>Parameters:</p> Name Type Description Default <code>target_col</code> <code>str</code> <p>The target column.</p> required <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be used.</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>npt.NDArray[np.float64]: The ratio of the target column to the total number of hours for each dwelling.</p>"},{"location":"reference/utils/loader/#utils.loader.identify_overheating_hours","title":"<code>identify_overheating_hours(dataf)</code>","text":"<p>Identify overheating hours based on a threshold and return the dataframe with the overheating flag.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be used.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The dataframe with the overheating flag.</p>"},{"location":"reference/utils/loader/#utils.loader.load_data_from_csv","title":"<code>load_data_from_csv(path)</code>","text":"<p>Loads data from a csv file. </p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to the csv file.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The dataframe containing the data from the csv file.</p>"},{"location":"reference/utils/loader/#utils.loader.load_simulation_data","title":"<code>load_simulation_data()</code>","text":"<p>Loads simulation data from src/data folder. </p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The simulation data.</p>"},{"location":"reference/utils/loader/#utils.loader.simulation_data_meta","title":"<code>simulation_data_meta()</code>","text":"<p>Loads metadata for Dataframe for use with e2sviz. </p> <p>Returns:</p> Type Description <code>dict[str, dict[str, Any]]</code> <p>dict[str, dict[str, Any]]: The metadata for the dataframe.</p>"},{"location":"reference/utils/loader/#utils.loader.simulation_data_prep","title":"<code>simulation_data_prep(dataf)</code>","text":"<p>Prepares the simulation data using e2sViz then returns the cleaned data. </p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The simulation data.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The cleaned simulation data.</p>"},{"location":"reference/utils/loader/#utils.loader.transform_overheating_table_from_float_to_text","title":"<code>transform_overheating_table_from_float_to_text(dataf)</code>","text":"<p>Transforms the overheating table from float to text.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The dataframe to be used.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The dataframe with the overheating table transformed from float to text.</p>"},{"location":"reference/utils/loss_functions/","title":"Loss functions","text":"<p>This file collates the various methods to calculate the error between the simulated and mesaured data</p>"},{"location":"reference/utils/loss_functions/#utils.loss_functions.calculate_mae","title":"<code>calculate_mae(predicted, actual)</code>","text":"<p>Calculate Mean Absolute Error (MAE).</p> <p>MAE calculates the average of the absolute differences between the predicted and actual values. MAE gives equal weight to all errors.</p> <p>Parameters:</p> Name Type Description Default <code>predicted</code> <code>Series</code> <p>The predicted values.</p> required <code>actual</code> <code>Series</code> <p>The actual (measured) values.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The mean absolute error.</p>"},{"location":"reference/utils/loss_functions/#utils.loss_functions.calculate_mse","title":"<code>calculate_mse(predicted, actual)</code>","text":"<p>Calculate Mean Square Error (MSE).</p> <p>MSE calculates the average of the squared differences between the predicted and actual values. MSE also penalizes larger errors more than MAE but does not take the square root, so it is not in the original scale of the data.</p> <p>Parameters:</p> Name Type Description Default <code>predicted</code> <code>Series</code> <p>The predicted values.</p> required <code>actual</code> <code>Series</code> <p>The actual (measured) values.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The mean square error.</p>"},{"location":"reference/utils/loss_functions/#utils.loss_functions.calculate_rmse","title":"<code>calculate_rmse(predicted, actual)</code>","text":"<p>Calculate Root Mean Square Error (RMSE).</p> <p>RMSE calculates the square root of the average of the squared differences between the predicted and actual values. RMSE penalizes larger errors more than MAE.</p> <p>Parameters:</p> Name Type Description Default <code>predicted</code> <code>Series</code> <p>The predicted values.</p> required <code>actual</code> <code>Series</code> <p>The actual (measured) values.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The root mean square error.</p>"},{"location":"reference/utils/schema/","title":"Schema","text":""}]}